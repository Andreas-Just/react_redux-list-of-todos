{"version":3,"sources":["store/loading.ts","constants/actionTypes.ts","store/todos.ts","store/query.ts","constants/sortOrders.ts","store/sort.ts","store/pagination.ts","store/index.ts","helpers/api.ts","components/User.tsx","components/TodoItem.tsx","components/Paginator.tsx","components/TodoList.tsx","components/SearchTodo.tsx","App.tsx","index.tsx"],"names":["initialState","loading","loaded","error","reduce","loadingState","action","type","todos","filter","todo","todoId","id","query","ASC","field","order","sortState","page","perPage","paginationState","rootReducer","combineReducers","loadingReducer","todosReducer","queryReducer","sort","sortReducer","pagination","paginationReducer","getLoading","state","getLoaded","getError","getQuery","getTodos","getVisibleTodos","createSelector","sortField","sortOrder","callback","a","b","localeCompare","name","visibleTodos","title","includes","reverse","store","createStore","composeWithDevTools","subscribe","localStorage","setItem","JSON","stringify","getState","getAll","url","fetch","then","response","json","User","user","Table","Cell","TodoItem","completed","dispatch","useDispatch","Row","className","positive","negative","textAlign","content","Button","onClick","color","icon","Icon","options","key","text","value","Paginator","useSelector","selectors","totalPages","Math","ceil","length","HeaderCell","colSpan","Dropdown","placeholder","floated","selection","onChange","direction","Pagination","activePage","onPageChange","ellipsisItem","prevItem","firstItem","nextItem","lastItem","headersConfig","delete","TodoList","celled","selectable","Header","Object","keys","map","header","Body","Footer","optionQuery","SearchTodo","Input","inverted","circular","size","target","pattern","maxLength","queryVal","replace","slice","setQuery","getAppData","todosFromServer","users","find","userId","undefined","App","Segment","as","disabled","catch","err","loadingActions","message","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9a808c7e.chunk.js","sourcesContent":["import { Action } from 'redux';\nimport {\n  START_LOADING,\n  SET_LOADED,\n  SET_ERROR,\n  FINISH_LOADING,\n} from '../constants/actionTypes';\n\ntype StartLoadingAction = Action<typeof START_LOADING>;\ntype FinishLoadingAction = Action<typeof FINISH_LOADING>;\ntype SetLoadedAction = Action<typeof SET_LOADED>;\ntype SetErrorAction = Action<typeof SET_ERROR> & {\n  error: string;\n};\n\nexport const startLoading = (): StartLoadingAction => ({\n  type: START_LOADING,\n});\nexport const finishLoading = (): FinishLoadingAction => ({\n  type: FINISH_LOADING,\n});\nexport const setLoaded = (): SetLoadedAction => ({\n  type: SET_LOADED,\n});\nexport const setError = (error = ''): SetErrorAction => ({\n  type: SET_ERROR,\n  error,\n});\n\nexport type LoadingState = {\n  loading: boolean;\n  loaded: boolean;\n  error: string;\n};\n\nconst initialState: LoadingState = {\n  loading: false,\n  loaded: false,\n  error: '',\n};\n\ntype LoadingAction = StartLoadingAction | SetLoadedAction | SetErrorAction | FinishLoadingAction;\n\nconst reduce = (loadingState = initialState, action: LoadingAction): LoadingState => {\n  switch (action.type) {\n    case START_LOADING:\n      return { ...loadingState, loading: true };\n    case SET_LOADED:\n      return { ...loadingState, loaded: true };\n    case SET_ERROR:\n      return { ...loadingState, error: action.error };\n    case FINISH_LOADING:\n      return { ...loadingState, loading: false };\n    default:\n      return loadingState;\n  }\n};\n\nexport default reduce;\n","export const START_LOADING = 'START_LOADING';\nexport const SET_LOADED = 'SET_LOADED';\nexport const SET_ERROR = 'SET_ERROR';\nexport const FINISH_LOADING = 'FINISH_LOADING';\n\nexport const INIT_TODOS = 'INIT_TODOS';\nexport const DELETE_TODO = 'DELETE_TODO';\n\nexport const SET_QUERY = 'SET_QUERY';\n\nexport const SORT_BY = 'SORT_BY';\n\nexport const SET_PAGE = 'SET_PAGE';\nexport const SET_PER_PAGE = 'SET_PER_PAGE';\n","import { Action } from 'redux';\nimport { INIT_TODOS, DELETE_TODO } from '../constants/actionTypes';\n\ntype InitTodosAction = Action<typeof INIT_TODOS> & {\n  todos: Todo[];\n};\ntype DeleteTodosAction = Action<typeof DELETE_TODO> & {\n  todoId: number;\n};\n\nexport const initTodos = (todos: Todo[]): InitTodosAction => ({\n  type: INIT_TODOS,\n  todos,\n});\nexport const deleteTodo = (todoId: number): DeleteTodosAction => ({\n  type: DELETE_TODO,\n  todoId,\n});\n\ntype TodosAction = InitTodosAction | DeleteTodosAction;\n\nconst reduce = (todos: Todo[] = [], action: TodosAction): Todo[] => {\n  switch (action.type) {\n    case INIT_TODOS:\n      return action.todos;\n    case DELETE_TODO:\n      return todos.filter(todo => action.todoId !== todo.id);\n    default:\n      return todos;\n  }\n};\n\nexport default reduce;\n","import { Action } from 'redux';\nimport { SET_QUERY } from '../constants/actionTypes';\n\ntype setQueryAction = Action<typeof SET_QUERY> & {\n  query: string;\n};\n\nexport const setQuery = (query: string): setQueryAction => ({\n  type: SET_QUERY,\n  query,\n});\n\ntype LoadingAction = setQueryAction;\n\nconst reduce = (query = '', action: LoadingAction): string => {\n  switch (action.type) {\n    case SET_QUERY:\n      return action.query;\n    default:\n      return query;\n  }\n};\n\nexport default reduce;\n","export const ASC = 'ASC';\nexport const DESC = 'DESC';\n","import { Action } from 'redux';\nimport { ASC, DESC } from '../constants/sortOrders';\nimport { SORT_BY } from '../constants/actionTypes';\n\ntype SortByAction = Action<typeof SORT_BY> & {\n  field: keyof HeadersConfig;\n};\n\nexport const setSortBy = (field: keyof HeadersConfig): SortByAction => ({\n  type: SORT_BY,\n  field,\n});\n\ntype SortState = {\n  field: keyof HeadersConfig;\n  order: typeof ASC | typeof DESC;\n};\n\nconst initialState: SortState = {\n  field: 'id',\n  order: ASC,\n};\n\nconst reduce = (sortState = initialState, action: SortByAction): SortState => {\n  switch (action.type) {\n    case SORT_BY:\n      if (action.field === sortState.field) {\n        return {\n          ...sortState,\n          order: sortState.order === ASC ? DESC : ASC,\n        };\n      }\n\n      return {\n        ...sortState,\n        field: action.field,\n        order: ASC,\n      };\n    default:\n      return sortState;\n  }\n};\n\nexport default reduce;\n","import { Action } from 'redux';\nimport { SET_PAGE, SET_PER_PAGE } from '../constants/actionTypes';\n\ntype SetPageAction = Action<typeof SET_PAGE>;\ntype SetPerPageAction = Action<typeof SET_PER_PAGE>;\n\nexport const setPage = (): SetPageAction => ({\n  type: SET_PAGE,\n});\n\ntype PaginationState = {\n  page: number;\n  perPage: number;\n};\n\nconst initialState: PaginationState = {\n  page: 1,\n  perPage: 10,\n};\n\ntype PaginationAction = SetPageAction | SetPerPageAction;\n\nconst reduce = (paginationState = initialState, action: PaginationAction): PaginationState => {\n  switch (action.type) {\n    case SET_PAGE:\n      return {\n        ...paginationState,\n      };\n    case SET_PER_PAGE:\n      return {\n        ...paginationState,\n      };\n    default:\n      return paginationState;\n  }\n};\n\nexport default reduce;\n","import { combineReducers, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createSelector } from 'reselect';\n\nimport loadingReducer from './loading';\nimport todosReducer from './todos';\nimport queryReducer from './query';\nimport sortReducer from './sort';\nimport paginationReducer from './pagination';\nimport { ASC, DESC } from '../constants/sortOrders';\n\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  todos: todosReducer,\n  query: queryReducer,\n  sort: sortReducer,\n  pagination: paginationReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const getLoading = (state: RootState) => state.loading.loading;\nexport const getLoaded = (state: RootState) => state.loading.loaded;\nexport const getError = (state: RootState) => state.loading.error;\nexport const getQuery = (state: RootState) => state.query;\n\nexport const getTodos = (state: RootState) => state.todos;\nexport const getSortBy = (state: RootState) => state.sort.field;\nconst getSortOrder = (state: RootState) => state.sort.order;\n\nexport const getVisibleTodos = createSelector(\n  getTodos,\n  getQuery,\n  getSortBy,\n  getSortOrder,\n\n  (\n    todos: Todo[],\n    query: string,\n    sortField: keyof HeadersConfig,\n    sortOrder: typeof ASC | typeof DESC,\n  ) => {\n    let callback: (a: Todo, b: Todo) => number = () => 0;\n\n    switch (typeof todos[0][sortField]) {\n      case 'string':\n        callback = (a, b) => a[sortField].localeCompare(b[sortField]);\n        break;\n      case 'object':\n        callback = (a, b) => a[sortField].name.localeCompare(b[sortField].name);\n        break;\n      default:\n        callback = (a, b) => a[sortField] - b[sortField];\n    }\n\n    const visibleTodos = todos\n      .filter(todo => todo.title.includes(query))\n      .sort(callback);\n      // .slice(0, 10);\n\n    if (sortOrder === DESC) {\n      visibleTodos.reverse();\n    }\n\n    return visibleTodos;\n  },\n);\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(),\n);\n\nstore.subscribe(() => {\n  localStorage.setItem('todos', JSON.stringify(store.getState()));\n});\n\nexport default store;\n","const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nconst getAll = <T>(url: string): Promise<T[]> => {\n  return fetch(`${API_URL}${url}.json`)\n    .then(response => response.json());\n};\n\nexport const getUsers = () => getAll<User>('/users');\nexport const getTodos = () => getAll<Todo>('/todos');\n","import React from 'react';\nimport { Table } from 'semantic-ui-react';\n\ntype PropsUser = {\n  user?: User;\n};\n\nconst User: React.FC<PropsUser> = ({ user }) => (\n  <Table.Cell>{user?.name || ''}</Table.Cell>\n);\n\nexport default User;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Button, Icon, Table } from 'semantic-ui-react';\nimport { deleteTodo } from '../store/todos';\nimport User from './User';\n\ntype Props = {\n  todo: Todo;\n};\n\nconst TodoItem: React.FC<Props> = ({ todo }) => {\n  const { id, user, completed, title } = todo;\n  const dispatch = useDispatch();\n\n  return (\n    <Table.Row\n      className=\"TodoItem\"\n      positive={completed}\n      negative={!completed}\n    >\n      <Table.Cell>{id}</Table.Cell>\n      <User user={user} />\n      <Table.Cell textAlign=\"left\">{title}</Table.Cell>\n      <Table.Cell content={completed ? 'Complebitur' : 'In processus'} />\n      <Table.Cell>\n        <Button\n          className=\"TodoItem-Delete\"\n          onClick={() => dispatch(deleteTodo(id))}\n          color=\"red\"\n          icon\n        >\n          <Icon name=\"trash alternate\" />\n          &nbsp;&nbsp;Delete\n        </Button>\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Icon, Pagination, Table, Dropdown } from 'semantic-ui-react';\nimport * as selectors from '../store';\n\nconst options = [\n  { key: 1, text: '5 todos', value: 5 },\n  { key: 2, text: '10 todos', value: 10 },\n  { key: 3, text: '20 todos', value: 20 },\n  { key: 4, text: '50 todos', value: 50 },\n];\n\nconst Paginator = () => {\n  const todos = useSelector(selectors.getTodos);\n  const totalPages = Math.ceil(todos.length / 10);\n  // console.log(totalPages)\n\n  return (\n    <Table.HeaderCell colSpan=\"10\" className=\"Pagination\">\n      <Dropdown\n        placeholder=\"Select people per page\"\n        floated=\"left\"\n        selection\n        name=\"perPage\"\n        value={10}\n        onChange={() => {}}\n        options={options}\n        direction=\"right\"\n      />\n      { totalPages !== 1\n      && (\n        <Pagination\n          floated=\"right\"\n          activePage={1}\n          onPageChange={() => {}}\n          ellipsisItem={{\n            content: <Icon name=\"ellipsis horizontal\" />,\n            icon: true,\n          }}\n          prevItem={{\n            content: <Icon name=\"angle left\" />,\n            // disabled: page === 1,\n            icon: true,\n          }}\n          firstItem={{\n            content: <Icon name=\"angle double left\" />,\n            // disabled: page === 1,\n            icon: true,\n          }}\n          nextItem={{\n            content: <Icon name=\"angle right\" />,\n            // disabled: page === totalPages,\n            icon: true,\n          }}\n          lastItem={{\n            content: <Icon name=\"angle double right\" />,\n            // disabled: page === totalPages,\n            icon: true,\n          }}\n          totalPages={totalPages}\n        />\n      )}\n    </Table.HeaderCell>\n  );\n};\n\nexport default Paginator;\n","import React, { Fragment } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Table } from 'semantic-ui-react';\nimport * as selectors from '../store';\nimport { setSortBy } from '../store/sort';\nimport TodoItem from './TodoItem';\nimport Paginator from './Paginator';\n\nconst headersConfig: HeadersConfig = {\n  id: 'Id',\n  user: 'Person',\n  title: 'Description',\n  completed: 'Completed',\n  delete: 'Delete todo',\n};\n\nconst TodoList = () => {\n  const todos = useSelector(selectors.getVisibleTodos);\n  const dispatch = useDispatch();\n\n  return (\n    <Table celled className=\"ui orange inverted TodoList\" selectable>\n      <Table.Header>\n        <Table.Row className=\"TodoList-TableRow\">\n          {Object.keys(headersConfig).map(header => (\n            <Fragment key={header}>\n              {header !== 'delete'\n                ? (\n                  <Table.HeaderCell\n                    className=\"TodoList-HeaderCell\"\n                    onClick={() => {\n                      dispatch(setSortBy(header));\n                    }}\n                    content={headersConfig[header]}\n                  />\n                ) : (\n                  <Table.HeaderCell\n                    className=\"TodoList-HeaderCell TodoList-HeaderCell_delete\"\n                    content={headersConfig[header]}\n                  />\n                )}\n            </Fragment>\n          ))}\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {todos.map(todo => <TodoItem key={todo.id} todo={todo} />)}\n      </Table.Body>\n      <Table.Footer>\n        <Table.Row className=\"TodoList-TableRow\">\n          <Paginator />\n        </Table.Row>\n      </Table.Footer>\n    </Table>\n  );\n};\n\nexport default TodoList;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Icon, Input } from 'semantic-ui-react';\nimport { getQuery } from '../store';\nimport { setQuery } from '../store/query';\n\nconst optionQuery = {\n  maxLength: 50,\n  pattern: /[^a-z ]/ig,\n};\n\nconst SearchTodo = () => {\n  const dispatch = useDispatch();\n  const query = useSelector(getQuery);\n\n  return (\n    <Input\n      icon={<Icon name=\"search\" inverted circular color=\"orange\" />}\n      className=\"SearchTodo\"\n      placeholder=\"Search...\"\n      size=\"large\"\n      value={query}\n      onChange={({ target }) => {\n        const { pattern, maxLength } = optionQuery;\n        const queryVal = target.value\n          .replace(pattern, '')\n          .replace(/\\s{2,}/g, ' ')\n          .slice(0, maxLength);\n\n        dispatch(setQuery(queryVal));\n      }}\n    />\n  );\n};\n\nexport default SearchTodo;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button, Header, Segment } from 'semantic-ui-react';\nimport './App.scss';\n\nimport * as api from './helpers/api';\nimport * as selectors from './store';\nimport * as loadingActions from './store/loading';\nimport { initTodos } from './store/todos';\nimport TodoList from './components/TodoList';\nimport SearchTodo from './components/SearchTodo';\n\nconst getAppData = async (): Promise<Todo[]> => {\n  const todosFromServer = await api.getTodos();\n  const users = await api.getUsers();\n\n  // await new Promise(ok => setTimeout(ok, 1000));\n\n  return todosFromServer.map((todo: Todo) => ({\n    ...todo,\n    user: users.find((user: User) => user.id === todo.userId) || undefined,\n  }));\n};\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(selectors.getLoading);\n  const loaded = useSelector(selectors.getLoaded);\n  const error = useSelector(selectors.getError);\n\n  const loadData = () => {\n    dispatch(loadingActions.startLoading());\n\n    getAppData()\n      .then(todosFromServer => {\n        dispatch(initTodos(todosFromServer));\n        dispatch(loadingActions.setLoaded());\n      })\n      .catch(err => {\n        dispatch(loadingActions.setError(\n          `Something went wrong: ${err.message}`,\n        ));\n      })\n      .finally(() => {\n        dispatch(loadingActions.finishLoading());\n      });\n  };\n\n  return (\n    <Segment inverted className=\"App Application\">\n      <Header as=\"h1\" color=\"orange\" content=\"Redux list of todos\" />\n      {loaded ? (\n        <>\n          <SearchTodo />\n          <TodoList />\n        </>\n      ) : (\n        <Button\n          className=\"App-LoadButton\"\n          content=\"Load Todo\"\n          loading={loading}\n          disabled={loading}\n          color=\"orange\"\n          size=\"big\"\n          onClick={loadData}\n        />\n      )}\n      <Header as=\"h2\" color=\"yellow\">{error}</Header>\n    </Segment>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}